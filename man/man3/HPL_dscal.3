.TH HPL_dscal 3 "September 27, 2000" "HPL 1.0" "HPL Library Functions"
.SH NAME
HPL_dscal \- x = alpha * x.
.SH SYNOPSIS
\fB\&#include <hpl.h>\fR
 
\fB\&void\fR
\fB\&HPL_dscal(\fR
\fB\&const int\fR
\fI\&N\fR,
\fB\&const double\fR
\fI\&ALPHA\fR,
\fB\&double *\fR
\fI\&X\fR,
\fB\&const int\fR
\fI\&INCX\fR
\fB\&);\fR
.SH DESCRIPTION
\fB\&HPL_dscal\fR
scales the vector x by alpha.
.SH ARGUMENTS
.TP 8
N       (local input)                 const int
On entry, N specifies the length of the vector x. N  must  be
at least zero.
.TP 8
ALPHA   (local input)                 const double
On entry, ALPHA specifies the scalar alpha.   When  ALPHA  is
supplied as zero, then the entries of the incremented array X
need not be set on input.
.TP 8
X       (local input/output)          double *
On entry,  X  is an incremented array of dimension  at  least
( 1 + ( n - 1 ) * abs( INCX ) )  that  contains the vector x.
On exit, the entries of the incremented array  X  are  scaled
by the scalar alpha.
.TP 8
INCX    (local input)                 const int
On entry, INCX specifies the increment for the elements of X.
INCX must not be zero.
.SH EXAMPLE
\fI\&#include <hpl.h>\fR
 
int main(int argc, char *argv[])
.br
{
.br
   double x[3];
.br
   x[0] = 1.0; x[1] = 2.0; x[2] = 3.0;
.br
   HPL_dscal( 3, 2.0, x, 1 );
.br
   printf("x=[%f,%f,%f]", x[0], x[1], x[2]);
.br
   exit(0);
.br
   return(0);
.br
}
.SH SEE ALSO
.BR HPL_daxpy (3),
.BR HPL_dcopy (3),
.BR HPL_dswap (3)
.SH REPORTING BUGS
A  bug report consists of a short description of the problem,
minimally  including a description of  the  environment (name
and versions  of  the operating  system, compilers, libraries
used ...) .  When appropriate,  a short (less than 100 lines)
example program demonstrating the problem should be attached.
Such a report should be sent to the following e-mail address:
hpl@cs.utk.edu                                               
                                                             
Everything else, that you believe being a bug report as well,
will be handled as time allows.                              
